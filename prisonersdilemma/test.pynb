cooperate = 0
cheat = 1
def always_cheat(history):
    return cheat
    
def always_cooperate(history):
    """
    Imput:  history,a list with elements 0 and 1 only. It is a list of the choices the oppornent has made so far (does not include the game they are now   playing)
    Output: Number 0, the choice that "always_cooperate" will make for the game they are now playing. 
    """
    return cooperate
    
def tit_for_tat(history):
    """
    Imput:  history,a list with elements 0 and 1 only. It is a list of the choices the oppornent has made so far (does not include the game they are now  playing)
    Output: Number 0 or 1. The choice that "tit_for_tat" will make for the game they are now playing. Number 0 for cooperate and 1 for cheat.
    """
    if len(history) == 0:
        return cooperate
    return history[-1]
 
import random

def random_choice(history):
"""
    Imput:  history,a list with elements 0 and 1 only. It is a list of the choices the oppornent has made so far (does not include the game they are now playing)
    Output: Number 0 or 1. The choice that "ramdom_choice" will make for the game they are now playing. Number 0 for cooperate and 1 for cheat.
    """
    return random.choice([cooperate,cheat])

        
def grudge(history):
    """
    Imput:  history,a list with elements 0 and 1 only. It is a list of the choices the oppornent has made so far (does not include the game they are now playing)
    Output: Number 0 or 1. The choice that "grudge" will make for the game they are now playing. Number 0 for cooperate and 1 for cheat.
    """
    if history == [0 for i in range(len(history))]: #if the opponent never cheat before, cooperate
                                                    #since cooperate = 0, if the history is a list of all 0, cooperate.
                                                    #so if history == [0 for i in range(len(history))], return cooperate
        return cooperate
    return cheat                                    #the opponent can only cheat or cooperate, so for "else", we return cheat
    
    
    
 # defining a function to play n games betweeen two players
 def play_n_games(player1, player2, n):
    """
    Input:  player1 and player2 are both functions with output of 1 for cheat or 0 for cooperate. n is the number of games they will play
    Output: a tuple with 0th element and 1st element representing the total score of player1 and player2 respectively.
    """
    history1 = [] # history(the choices player1 made so far) for player1
    history2 = [] # history(the choices player2 made so far) for player2
                  # at first no games has played so history1 = [], history2 = []
    score1 = 0    # initially, no player has score, so score1 = score2 = 0
    score2 = 0
    for i in range(n):                          # the following codes will run for n times since there are n games so we use "for i in range(n)"
                                                # since many kinds of players make choices depend on the history of the oppornent,we need to find the                                                       # history of player1 and player2, which are history1 and history2
        history1.append(player1(history2))      # for every game, we need to add the choice player1 make (player1(history2)) in newest game to the history1
                                                # so history1 = history1.append(player1(history2)) after each game
        history2.append(player2(history1[:-1])) # since history 1 now has added the choice of player1 of the progressing game, the choices player1 made                                                     # before the progressing game is history[:-1]
                                                # so history2 = history2.append(player2(history1[:-1]))
        if history1[i] == history2[i] == 0:     # history1[i] == history2[i] == 0 means player1 and player2 both cooperate in ith game
                                                # so both players earn 2 points from their former scores
            score1 = score1 + 2
            score2 = score2 + 2
        elif history1[i] == history2[i] == 1:   # history1[i] == history2[i] == 1 means player1 and player2 both cheat in ith game
                                                # so both players' scores remain unchanged from their former scores
            score1 = score1
            score2 = score2
        elif history1[i] ==1 and history2[i] == 0: # history1[i] == history2[i] == 0 means player1 cheats and player2 cooperates in ith game
                                                   # so player1 earns 3 points(score1 = score1 + 3), player2 loses 1 point(score2 = score2 - 1)
            score1 = score1 + 3
            score2 = score2 - 1
        else:                                      # else is the last situation: player1 and player1 cooperates and player2 cheats in ith game
                                                   # so player1 loses 1 points (score1 = score1 - 1), player2 earns 3 points(score2 = score2 + 3)
            score1 = score1 - 1
            score2 = score2 + 3
    return (score1, score2)
def tournament(player_list):
    """
    Input:  player_list, a list of function representing the players. These function are sopposed to have output with 0 or 1. 0 for cooperate and 1 for  cheat.
    Output: a list of numbers with length equals to the imput list. The ith element in the output list is the total score of player_list[i] after every player play every other player exactly 10 times.
    """
    score = [0 for i in range(len(player_list))] #the initial score for each player in the player_list, i.e. 0.
    rough_score = {} # rough_score is a dictionary. 
                     # rough_score.keys = [i in range(len(player_list))]
                     # rough_score[i] = the sum of the tuple of play_n_games(player_list[i],player_list[j]) with i<j<len(player_list).
                     # then rough_score records the score of every game in some order.
                     # this is because we only let the player play with player after itself in the player_list,and this method avoid repetition.
    for i in range(len(player_list)): # so we use for loop to go through every player in the player_list
        score1 = ()                   # score1 represents the turple of rough_score[i].
                                      # before adding up the tuple of scores, the tuple is empty, so score1 = ()
        for j in range(i+1,len(player_list)): # to go through every player after playeri(elements in range(i+1,len(player_list)) of the player_list)
                                              # we use another for loop: for j in range(i+1,len(player_list))
            score1 = score1 + play_n_games(player_list[i],player_list[j],10) # so the tuples are added up when going through the for loop of j
        rough_score[i] = score1 # rough_score[i] will be finded then because it is equal to score1 after the for loop of j.
                                # after going through every i, we get the value we want for each key in the dictionary rough_score.

    for i in range(len(player_list)):      # to find the total score of each player in the player_list, we go through each player by a for loop:
                                           # for i in range(len(player_list))
        for j in range(len(player_list)):  # each player it need to play with player other then itself in player_list 
                                           # "for j in range(len(player_list))" means that we let every playerj play with playeri
                                           #and try to record the total score of playeri
            if j < i:                                            # "if j < i" means that "if the position of playerj is before that of playeri in the list"
                score[i] = rough_score[j][2*(i-j)-1] + score[i]  # the score of playeri for the game it plays with playerj is then recorded at
                                                                 # rough_score[j] and it is the (2*(i-j)-1)th element of the tuple rough_score[j]
                                                                 # because of the way we recorded the score above.
                                                                 # so score[i] = rough_score[j][2*(i-j)-1] + score[i]
            if j > i:                                            # "if j > i" means that "if the position of playerj is before that of playeri"
                score[i] = rough_score[i][2*(j-i-1)] + score[i]  # the score of playeri for the game it plays with playerj is then recorded at
                                                                 # rough_score[i] and it is the (2*(j-i-1))th element of the tuple rough_score[j]
                                                                 # because of the way we recorded the score above.
                                                                 # score[i] = rough_score[i][2*(j-i-1)] + score[i]
            else:                    #else represented the situation that i = j.
                score[i] = score[i]  #since i could not play with itself, when i=j, score[i] does not change.
    return score                     # after going through every player in the player_list, we can find out the final score list for a player_list.
    


